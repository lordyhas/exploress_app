// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'data/database/model/setting_data.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 5560782510154998477),
      name: 'SettingAppData',
      lastPropertyId: const IdUid(17, 7227740988057721063),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 569991136253946938),
            name: 'isNotificationOn',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(2, 3288570092514569235),
            name: 'isSync',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5178177050901433786),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(5, 4422243250954652685),
            name: 'phoneName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 5820099891889995848),
            name: 'userCode',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 8908403977904314126),
            name: 'phoneModel',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 7961454477356455795),
            name: 'os',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 3388544037187132197),
            name: 'osVersion',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 1237651840878710606),
            name: 'email',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 3582487987767976074),
            name: 'theme',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 2192075448493512559),
            name: 'language',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 5236154708065849595),
            name: 'userAuthState',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 3277619871933652792),
            name: 'lastAuthCheck',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 3270478675330525529),
            name: 'location',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 1485367794502277469),
            name: 'createAt',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 7227740988057721063),
            name: 'isSyncWithMail',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(1, 5560782510154998477),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [3629066355854659195],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    SettingAppData: EntityDefinition<SettingAppData>(
        model: _entities[0],
        toOneRelations: (SettingAppData object) => [],
        toManyRelations: (SettingAppData object) => {},
        getId: (SettingAppData object) => object.id,
        setId: (SettingAppData object, int id) {
          object.id = id;
        },
        objectToFB: (SettingAppData object, fb.Builder fbb) {
          final phoneNameOffset = object.phoneName == null
              ? null
              : fbb.writeString(object.phoneName!);
          final userCodeOffset = object.userCode == null
              ? null
              : fbb.writeString(object.userCode!);
          final phoneModelOffset = object.phoneModel == null
              ? null
              : fbb.writeString(object.phoneModel!);
          final osOffset =
              object.os == null ? null : fbb.writeString(object.os!);
          final osVersionOffset = object.osVersion == null
              ? null
              : fbb.writeString(object.osVersion!);
          final emailOffset =
              object.email == null ? null : fbb.writeString(object.email!);
          final lastAuthCheckOffset = object.lastAuthCheck == null
              ? null
              : fbb.writeString(object.lastAuthCheck!);
          final locationOffset = object.location == null
              ? null
              : fbb.writeString(object.location!);
          final createAtOffset = object.createAt == null
              ? null
              : fbb.writeString(object.createAt!);
          fbb.startTable(18);
          fbb.addBool(0, object.isNotificationOn);
          fbb.addBool(1, object.isSync);
          fbb.addInt64(3, object.id);
          fbb.addOffset(4, phoneNameOffset);
          fbb.addOffset(5, userCodeOffset);
          fbb.addOffset(6, phoneModelOffset);
          fbb.addOffset(7, osOffset);
          fbb.addOffset(8, osVersionOffset);
          fbb.addOffset(9, emailOffset);
          fbb.addInt64(10, object.theme);
          fbb.addInt64(11, object.language);
          fbb.addInt64(12, object.userAuthState);
          fbb.addOffset(13, lastAuthCheckOffset);
          fbb.addOffset(14, locationOffset);
          fbb.addOffset(15, createAtOffset);
          fbb.addBool(16, object.isSyncWithMail);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = SettingAppData(
              isNotificationOn: const fb.BoolReader()
                  .vTableGetNullable(buffer, rootOffset, 4),
              isSync: const fb.BoolReader()
                  .vTableGetNullable(buffer, rootOffset, 6),
              isSyncWithMail: const fb.BoolReader()
                  .vTableGetNullable(buffer, rootOffset, 36),
              createAt: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 34),
              phoneName: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 12),
              userCode: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 14),
              phoneModel: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16),
              email: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 22),
              location: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 32),
              os: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 18),
              osVersion: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 20),
              theme: const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0),
              language: const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0),
              userAuthState: const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 28),
              lastAuthCheck: const fb.StringReader(asciiOptimization: true).vTableGetNullable(buffer, rootOffset, 30))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [SettingAppData] entity fields to define ObjectBox queries.
class SettingAppData_ {
  /// see [SettingAppData.isNotificationOn]
  static final isNotificationOn =
      QueryBooleanProperty<SettingAppData>(_entities[0].properties[0]);

  /// see [SettingAppData.isSync]
  static final isSync =
      QueryBooleanProperty<SettingAppData>(_entities[0].properties[1]);

  /// see [SettingAppData.id]
  static final id =
      QueryIntegerProperty<SettingAppData>(_entities[0].properties[2]);

  /// see [SettingAppData.phoneName]
  static final phoneName =
      QueryStringProperty<SettingAppData>(_entities[0].properties[3]);

  /// see [SettingAppData.userCode]
  static final userCode =
      QueryStringProperty<SettingAppData>(_entities[0].properties[4]);

  /// see [SettingAppData.phoneModel]
  static final phoneModel =
      QueryStringProperty<SettingAppData>(_entities[0].properties[5]);

  /// see [SettingAppData.os]
  static final os =
      QueryStringProperty<SettingAppData>(_entities[0].properties[6]);

  /// see [SettingAppData.osVersion]
  static final osVersion =
      QueryStringProperty<SettingAppData>(_entities[0].properties[7]);

  /// see [SettingAppData.email]
  static final email =
      QueryStringProperty<SettingAppData>(_entities[0].properties[8]);

  /// see [SettingAppData.theme]
  static final theme =
      QueryIntegerProperty<SettingAppData>(_entities[0].properties[9]);

  /// see [SettingAppData.language]
  static final language =
      QueryIntegerProperty<SettingAppData>(_entities[0].properties[10]);

  /// see [SettingAppData.userAuthState]
  static final userAuthState =
      QueryIntegerProperty<SettingAppData>(_entities[0].properties[11]);

  /// see [SettingAppData.lastAuthCheck]
  static final lastAuthCheck =
      QueryStringProperty<SettingAppData>(_entities[0].properties[12]);

  /// see [SettingAppData.location]
  static final location =
      QueryStringProperty<SettingAppData>(_entities[0].properties[13]);

  /// see [SettingAppData.createAt]
  static final createAt =
      QueryStringProperty<SettingAppData>(_entities[0].properties[14]);

  /// see [SettingAppData.isSyncWithMail]
  static final isSyncWithMail =
      QueryBooleanProperty<SettingAppData>(_entities[0].properties[15]);
}
